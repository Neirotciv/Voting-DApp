{"version":3,"sources":["scripts/getWeb3.js","components/Voting.jsx","components/Winning.jsx","components/Proposals.jsx","components/Voter.jsx","components/Voters.jsx","components/AddVoter.jsx","components/WorkflowStatus.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","request","method","on","alert","location","reload","console","log","provider","HttpProvider","Voting","props","useState","voterAddress","setVoterAddress","contract","setContract","proposalId","setProposalId","element","document","getElementById","id","value","methods","setVote","send","from","userAccount","transaction","events","Voted","voter","Message","useEffect","className","type","placeholder","onClick","Winning","status","setStatus","idWinningProposal","setIdWinningProposal","winningProposalID","call","workflowStatus","statusId","getWinningProposal","updateStatus","WorkflowStatusChange","fromBlock","event","newStatus","returnValues","Proposals","proposals","setProposals","updateProposalList","options","toBlock","getPastEvents","proposalsEvent","proposal","map","description","vote","ProposalRegistered","Voter","isRegistered","setIsRegistered","setworkflowStatus","setId","getVoter","user","addProposal","idEvent","AddProposal","checkIfUserIsRegistered","checkWorkflowStatus","VoterRegistered","inputIfRegistered","Voters","votersAddress","setVotersAddress","addressesEvent","addresses","updateVotersList","push","newVoter","address","AddVoter","setEvent","setNewVoter","voterToAdd","addVoter","WorkflowStatus","stringStatus","setStringStatus","stringStatusFromId","onload","Header","contractAddress","ChangeWorkflowStatus","useContext","ContractContext","setworkflowStatusEvent","winningProposal","setWinningProposal","updatePreviousNextStatusInFront","previousStatus","startProposalsRegistering","error","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Owner","React","createContext","App","setWeb3","setAccounts","setContractAddress","setOwner","isOwner","setIsOwner","setUserAccount","UserDashboard","web3Provider","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","instance","owner","contractOwner","setUpWeb3","Provider","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.827919ab.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n        // If the Client has a RPC provider\n        if (window.ethereum) {\n            const web3 = new Web3(window.ethereum);\n            try {\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\n                // await window.ethereum.enable();\n                resolve(web3);\n\n                window.ethereum.on('disconnect', () =>{\n                    alert(\"Vous n'êtes pas connecté\");\n                });\n                window.ethereum.on('accountsChanged', () => {\n                    window.location.reload();\n                })\n                window.ethereum.on('chainChanged', () => {\n                    window.location.reload();\n                })\n            } catch (error) {\n                reject(error);\n            }\n        } \n        // If Web3 is injected by Metamask provider\n        else if (window.web3) {\n            const web3 = window.web3;\n            console.log(\"Injected web3 detected\");\n            resolve(web3);\n        } \n        // No provider found, fallback to localhost\n        else {\n            const provider = new Web3.provider.HttpProvider(\"http://127.0.0.1:8545\");\n            const web3 = Web3(provider);\n            console.log(\"No web3 instance injected, using local web3\");\n            resolve(web3);\n        }\n    })\n});\n\n\nexport default getWeb3;","import React, { useEffect, useState } from \"react\";\n\nfunction Voting(props) {\n    const [voterAddress, setVoterAddress] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n    const [proposalId, setProposalId] = useState(null);\n\n    useEffect(() => {\n        setContract(props.contract);\n    },[props.contract]);\n\n    async function voteForProposal() {\n        const element = document.getElementById(\"vote-proposal-id\");\n        const id = element.value;\n        try {\n            const transaction = await contract.methods.setVote(id).send({ from: props.userAccount });\n            setVoterAddress(transaction.events.Voted.voter);\n            setProposalId(transaction.events.Voted.proposalId);\n        } catch (error) {\n            console.log(\"vote for proposal\", error);\n        }\n        element.value = \"\";\n    }\n\n    function Message() {\n        if (voterAddress && proposalId) {\n            return (\n                <p>{voterAddress} has vote for proposal {proposalId}</p>\n            )\n        }\n    }\n\n    return (\n        <div className=\"window\">\n            <h3>Voting</h3>\n            <input id=\"vote-proposal-id\" type=\"text\" placeholder=\"Proposal id\" />\n            <button onClick={voteForProposal}>Validate</button>\n            <Message />\n        </div>\n    )\n}\n\nexport default Voting;","import React, { useEffect, useState } from \"react\";\n\nfunction Winning(props) {\n    const [status, setStatus] = useState(\"0\");\n    const [idWinningProposal, setIdWinningProposal] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        async function updateStatus() {\n            if (contract) {\n                const statusId = await contract.methods.workflowStatus().call({ from: props.userAccount });\n                setStatus(statusId);\n            }\n        }\n        \n        if (status === \"5\") {\n            getWinningProposal();\n        }\n\n        updateStatus();\n    },[status]);\n\n    if (contract) {\n        contract.events.WorkflowStatusChange({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            let newStatus = event.returnValues.newStatus;\n            setStatus(newStatus);\n        })\n    }\n\n    async function getWinningProposal() {\n        const id = await contract.methods.winningProposalID().call({ from: props.userAccount });\n        setIdWinningProposal(id);\n    }\n\n    if (status === \"5\") {\n        return (\n            <div className=\"good\">\n                <h3>Winning proposal is {idWinningProposal}</h3>\n            </div>\n        );\n    }\n    \n}\n\nexport default Winning;","import React, { useEffect, useState } from \"react\";\nimport Winning from \"./Winning\";\n\nfunction Proposals(props) {\n    const [proposals, setProposals] = useState([]);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        updateProposalList();\n    },[]);\n\n    async function updateProposalList() {\n        const options = {\n            fromBlock: 0,\n            toBlock: \"latest\"\n        }\n        const proposalsEvent = await contract.getPastEvents(\"ProposalRegistered\", options);\n        const proposal = proposalsEvent.map(event => \n            {   \n                return { id: event.returnValues.proposalId, description: event.returnValues.proposal, vote: 0 };\n            }  \n        );\n        setProposals(proposal);\n    }\n\n    contract.events.ProposalRegistered({ fromBlock: \"latest\" })\n        .on('data', proposalsEvent => {\n            updateProposalList()\n        });\n\n    async function updateVote(id) {\n        const vote = await contract.methods.getOneProposal(id).call({ from: props.userAccount });\n        console.log(vote);\n    }\n\n    return (\n        <div className=\"window\">\n            <Winning userAccount={props.userAccount}  contract={props.contract} />\n            <h3>Proposals list</h3>\n            <table>\n                <tbody>\n                    <tr>\n                        <td><strong>Id</strong></td>\n                        <td><strong>Description</strong></td>\n                        <td><strong>Vote</strong></td>\n                    </tr>\n                    {proposals.map(proposal => (\n                        <tr key={proposal.id}>\n                            <td>{proposal.id}</td>\n                            <td>{proposal.description}</td>\n                            <td>{proposal.vote}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Proposals;","import React, { useEffect, useState } from \"react\";\nimport Voting from \"./Voting\";\nimport Proposals from \"./Proposals\";\n\nfunction Voter(props) {\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [workflowStatus, setworkflowStatus] = useState(0);\n    const [contract, setContract] = useState(props.contract);\n    const [id, setId] = useState(null);\n\n    useEffect(() => {\n        setContract(props.contract);\n        checkIfUserIsRegistered();\n        checkWorkflowStatus();\n    },[props.contract]);\n\n    // Je veux vérifier si user est registered\n    contract.events.VoterRegistered({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            if (event.returnValues.voterAddress === props.userAccount) {\n                setIsRegistered(true)\n            }\n        })\n    \n        // Je veux récupérer le workflowstatus actuel\n    contract.events.WorkflowStatusChange({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            let newStatus = event.returnValues.newStatus;\n            setworkflowStatus(newStatus);\n        })\n   \n    \n    async function checkIfUserIsRegistered() {\n        if (contract && props.userAccount) {\n            const user = await contract.methods.getVoter(props.userAccount).call({ from: props.userAccount });\n            setIsRegistered(user.isRegistered);\n        }\n    }\n\n    async function checkWorkflowStatus() {\n        if (contract && props.userAccount) {\n            const status = await contract.methods.workflowStatus().call({ from: props.userAccount });\n            setworkflowStatus(status);\n        }\n    }\n\n    async function addProposal() {\n        const element = document.getElementById(\"proposal-description\");\n        const description = element.value;\n        try {\n            const transaction = await contract.methods.addProposal(description).send({ from: props.userAccount });\n            const idEvent = transaction.events.ProposalRegistered.returnValues.proposalId;\n            setId(idEvent);\n        } catch (error) {\n            console.log(\"add proposal\", error)\n        }\n    }\n\n    function AddProposal() {\n        if (workflowStatus === \"1\") {\n            return (\n                <div className=\"window\">\n                    <h3>Add you're proposal</h3>\n                    <input id=\"proposal-description\" type=\"text\" placeholder=\"Description...\" />\n                    <button onClick={addProposal}>Validate</button>\n                    {(id === null ? \"\" : <p className=\"good\">Proposal id {id} just recorded</p>)}\n                </div>\n            )\n        }\n        return <div className=\"window\"><h3>The proposal session is finished or not yet open</h3></div>\n    }\n\n    function inputIfRegistered() {\n        if (isRegistered) {\n            return (\n                <div>\n                    <AddProposal isRegistered={isRegistered} />\n                    {workflowStatus === \"3\" ? <Voting userAccount={props.userAccount} contract={props.contract} /> : \"\" }\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"window\">\n                <h2>Voter - {(isRegistered ? \"you are registered\" : \"you are not registered\")}</h2>\n            </div>\n            {inputIfRegistered()}\n            <Proposals contract={props.contract} />\n        </div>\n        \n    )\n}\n\nexport default Voter;","import React, { useEffect, useState } from \"react\";\n\nfunction Voters(props) {\n    const [votersAddress, setVotersAddress] = useState([]);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        async function updateVotersList() {\n            const options = {\n                fromBlock: 0,\n                toBlock: \"latest\"\n            }\n            const addressesEvent = await contract.getPastEvents(\"VoterRegistered\", options);\n            const addresses = addressesEvent.map(event => event.returnValues.voterAddress);\n            setVotersAddress(addresses);\n        }\n\n        updateVotersList();\n    },[]);\n\n    useEffect(() => {\n        votersAddress.push(props.newVoter);\n    },[props.newVoter])\n\n    return (\n        <div>\n            <h3>Voters list</h3>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Address</td>\n                    </tr>\n                    {votersAddress.map(address => (\n                        <tr key={address}>\n                            <td>{address}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Voters;","import React, { useEffect, useState } from \"react\";\nimport Voters from \"./Voters\";\n\nfunction AddVoter(props) {\n    const [event, setEvent] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n    const [newVoter, setNewVoter] = useState(null)\n\n    useEffect(() => {\n        setContract(props.contract);\n    },[props.contract]);\n\n    async function addNewVoter() {\n        const element = document.getElementById(\"new-voter-address\");\n        const voterToAdd = element.value;\n        setNewVoter(voterToAdd);\n        let transaction;\n\n        try {\n            // Récupérer l'évenement dans la transaction\n            transaction = await contract.methods.addVoter(voterToAdd).send({ from: props.userAccount });\n            const event = transaction.events.VoterRegistered.returnValues.voterAddress;\n            setEvent(event);\n        } catch (error) {\n            console.log(error)\n        }\n\n        element.value = \"\";\n    }\n\n    return (\n        <div className=\"window\">\n            <h3>Add new voter <em>(only in registering voters session)</em></h3>\n            <input id=\"new-voter-address\" type=\"text\" placeholder=\"address 0x...\" />\n            <button onClick={addNewVoter}>Validate</button>\n            {(event === null ? \"\" : <p className=\"good\">{event} just recorded</p>)}\n            <Voters contract={props.contract} newVoter={newVoter} />\n        </div>\n    )\n}\n\nexport default AddVoter;","import React, { useEffect, useState } from \"react\";\n\nfunction WorkflowStatus(props) {\n    const [stringStatus, setStringStatus] = useState(\"Registering voters\");\n    const [contract, setContract] = useState(null);\n    const [status, setStatus] = useState(0);\n\n    useEffect(() => {\n        setContract(props.contract);\n        updateStatus();\n    },[props.contract]);\n\n    // Je veux récupérer le workflowstatus actuel\n    if (contract) {\n        contract.events.WorkflowStatusChange({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            let newStatus = event.returnValues.newStatus;\n            setStatus(newStatus);\n            stringStatusFromId(newStatus);\n        })\n    }\n\n    async function updateStatus() {\n        if (contract) {\n            const statusId = await contract.methods.workflowStatus().call({ from: props.userAccount });\n            setStatus(statusId);\n            stringStatusFromId(statusId);\n        }\n    }\n\n    function stringStatusFromId(id) {\n        switch (id) {\n            case \"0\":\n                setStringStatus(\"Registering voters\");\n                break;\n            case \"1\":\n                setStringStatus(\"Proposals registration started\");\n                break;\n            case \"2\":\n                setStringStatus(\"Proposals registration ended\");\n                break;\n            case \"3\":\n                setStringStatus(\"Voting session started\");\n                break;\n            case \"4\":\n                setStringStatus(\"Voting session ended\");\n                break;\n            case \"5\":\n                setStringStatus(\"Votes tallied\");\n                break;\n            default:\n                setStringStatus(\"Status error\");\n        }\n    }\n\n    window.onload = updateStatus();\n    \n    return (\n        <div>\n            <hr/>\n            <h3>Workflowstatus {status} : {stringStatus}</h3>\n        </div>\n    )\n}\n\nexport default WorkflowStatus;","import WorkflowStatus from \"./WorkflowStatus\";\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h3 id=\"contract\">Contract: {props.contractAddress}</h3>\n            <h3 id=\"account\">Account: {props.userAccount}</h3>\n            <WorkflowStatus userAccount={props.userAccount} contract={props.contract} />\n        </div>\n    )\n}\n\nexport default Header;","import React, { useEffect, useState, useContext } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./scripts/getWeb3\";\nimport Voter from \"./components/Voter\";\nimport AddVoter from \"./components/AddVoter\";\nimport Header from \"./components/Header\";\nimport Proposals from \"./components/Proposals\";\n\n// avoir une application décentralisée qui permet d'appeler toutes les fonctions\n// faire une vidéo du workflow\n// déployer l'application sur serveur public\n\nimport \"./App.css\";\n\n// ====================================\n// ---------- WORKFLOWSTATUS ----------\n// ====================================\n\nfunction ChangeWorkflowStatus(props) {\n    const contract = useContext(ContractContext);\n    const [workflowStatusEvent, setworkflowStatusEvent] = useState(null);\n    const [winningProposal, setWinningProposal] = useState(null);\n   \n    async function updateStatus() {\n        if (contract) {\n            const winningProposalID = await contract.methods.winningProposalID().call({ from: props.userAccount });\n            setWinningProposal(winningProposalID);\n        }\n    }\n\n    window.onload = updateStatus();\n    \n    function updatePreviousNextStatusInFront(transaction) {\n        const workflowStatus = [\n            transaction.events.WorkflowStatusChange.returnValues.previousStatus,\n            transaction.events.WorkflowStatusChange.returnValues.newStatus\n        ];\n        console.log(workflowStatus);\n        setworkflowStatusEvent(workflowStatus);\n    }\n\n    async function startProposalsRegistering() {\n        try {\n            const transaction = await contract.methods.startProposalsRegistering().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.error(\"start proposals registering\", error);\n        }\n    }\n\n    async function endProposalsRegistering() {\n        try {\n            const transaction = await contract.methods.endProposalsRegistering().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async function startVotingSession() {\n        try {\n            const transaction = await contract.methods.startVotingSession().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    async function endVotingSession() {\n        try {\n            const transaction = await contract.methods.endVotingSession().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    async function tallyVotes() {\n        try {\n            const transaction = await contract.methods.tallyVotes().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n            const winningProposalID = await contract.methods.winningProposalID().call({ from: props.userAccount });\n            setWinningProposal(winningProposalID);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    return (\n        <div className=\"window\">\n            <div>Previous status : </div>\n            <div>New status : </div><br/>\n            <div>Winner is {winningProposal}</div>\n            \n            <div className=\"form\">\n                <button onClick={startProposalsRegistering}>1 - Start proposals registering</button>\n                <button onClick={endProposalsRegistering}>2 - End proposals registering</button>\n                <button onClick={startVotingSession}>3 - Start voting session</button>\n                <button onClick={endVotingSession}>4 - End voting session</button>\n                <button onClick={tallyVotes}>5 - Tally votes</button> \n            </div>\n        </div>\n    )\n}\n\n// ===========================\n// ---------- OWNER ----------\n// ===========================\n\nfunction Owner(props) {\n    return (\n        <div>\n            <div className=\"window\">\n                <h2>Owner</h2>\n            </div>\n            <ChangeWorkflowStatus userAccount={props.userAccount} />\n            <AddVoter userAccount={props.userAccount} contract={props.contract} />\n            <Proposals contract={props.contract} />\n        </div>\n    )\n}\n\n// =========================\n// ---------- APP ----------\n// =========================\n\nconst ContractContext = React.createContext();\n\nfunction App() {\n    const [web3, setWeb3] = useState(null);\n    const [accounts, setAccounts] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [contractAddress, setContractAddress] = useState(null);\n    const [owner, setOwner] = useState(null);\n    const [isOwner, setIsOwner] = useState(false);\n    const [userAccount, setUserAccount] = useState(null);\n\n    useEffect(() => {\n        async function setUpWeb3() {\n            try {\n                const web3Provider = await getWeb3();\n                const accounts = await web3Provider.eth.getAccounts();\n                const networkId = await web3Provider.eth.net.getId();\n                const deployedNetwork = VotingContract.networks[networkId];\n                const instance = await new web3Provider.eth.Contract(\n                    VotingContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                const contractOwner = await instance.methods.owner().call();\n                const contractAddress = await instance.options.address;\n                \n                if (accounts[0] === contractOwner) { setIsOwner(true) }\n                setWeb3(web3Provider);\n                setContract(instance);\n                setAccounts(accounts);\n                setOwner(contractOwner);\n                setContractAddress(contractAddress);\n                setUserAccount(accounts[0]);\n\n                \n            } catch (error) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details\");\n                console.error(error);\n            }\n        }\n        \n        setUpWeb3();\n    },[]);\n\n    function UserDashboard(props) {\n        if (props.userAccount) {\n            if (isOwner) {\n                return <Owner userAccount={props.userAccount} contract={props.contract} />;\n            }\n            return <Voter userAccount={props.userAccount} contract={props.contract} />;\n        }\n    }\n\n    if (!web3 && !contract) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <ContractContext.Provider value={contract}>\n                <Header contractAddress={contractAddress} userAccount={userAccount} contract={contract} />\n                <UserDashboard isOwner={isOwner} userAccount={userAccount} contract={contract} />\n            </ContractContext.Provider>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}