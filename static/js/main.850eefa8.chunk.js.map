{"version":3,"sources":["scripts/getWeb3.js","components/Voting.jsx","components/Proposals.jsx","components/Winning.jsx","components/Voter.jsx","components/Voters.jsx","components/AddVoter.jsx","components/WorkflowStatus.jsx","components/Header.jsx","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","web3","Web3","request","method","on","alert","location","reload","console","log","provider","HttpProvider","Voting","props","useState","voterAddress","setVoterAddress","contract","setContract","proposalId","setProposalId","element","document","getElementById","id","value","methods","setVote","send","from","userAccount","transaction","events","Voted","voter","Message","useEffect","className","type","placeholder","onClick","Proposals","listId","setListId","options","fromBlock","toBlock","getPastEvents","proposalsId","updateProposalList","ProposalRegistered","event","push","map","returnValues","Winning","workflowStatus","idWinningProposal","setIdWinningProposal","winningProposalID","call","getWinningProposal","Voter","isRegistered","setIsRegistered","setworkflowStatus","setEvent","getVoter","user","status","addProposal","description","AddProposal","checkIfUserIsRegistered","checkWorkflowStatus","VoterRegistered","WorkflowStatusChange","newStatus","inputAddProposal","Voters","votersAddress","setVotersAddress","addresses","updateVotersList","AddVoter","voterToAdd","addVoter","WorkflowStatus","stringStatus","setStringStatus","setStatus","updateStatus","statusId","stringStatusFromId","onload","Header","contractAddress","ChangeWorkflowStatus","useContext","ContractContext","setworkflowStatusEvent","winningProposal","setWinningProposal","updatePreviousNextStatusInFront","previousStatus","startProposalsRegistering","error","endProposalsRegistering","startVotingSession","endVotingSession","tallyVotes","Owner","React","createContext","App","setWeb3","setAccounts","setContractAddress","setOwner","isOwner","setIsOwner","setUserAccount","UserDashboard","web3Provider","eth","getAccounts","accounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","address","instance","owner","contractOwner","setUpWeb3","Provider","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.850eefa8.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n    window.addEventListener(\"load\", async () => {\n        // If the Client has a RPC provider\n        if (window.ethereum) {\n            const web3 = new Web3(window.ethereum);\n            try {\n                await window.ethereum.request({ method: 'eth_requestAccounts' });\n                // await window.ethereum.enable();\n                resolve(web3);\n\n                window.ethereum.on('disconnect', () =>{\n                    alert(\"Vous n'êtes pas connecté\");\n                });\n                window.ethereum.on('accountsChanged', () => {\n                    window.location.reload();\n                })\n                window.ethereum.on('chainChanged', () => {\n                    window.location.reload();\n                })\n            } catch (error) {\n                reject(error);\n            }\n        } \n        // If Web3 is injected by Metamask provider\n        else if (window.web3) {\n            const web3 = window.web3;\n            console.log(\"Injected web3 detected\");\n            resolve(web3);\n        } \n        // No provider found, fallback to localhost\n        else {\n            const provider = new Web3.provider.HttpProvider(\"http://127.0.0.1:8545\");\n            const web3 = Web3(provider);\n            console.log(\"No web3 instance injected, using local web3\");\n            resolve(web3);\n        }\n    })\n});\n\n\nexport default getWeb3;","import React, { useEffect, useState } from \"react\";\n\nfunction Voting(props) {\n    const [voterAddress, setVoterAddress] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n    const [proposalId, setProposalId] = useState(null);\n\n    useEffect(() => {\n        setContract(props.contract);\n    },[props.contract]);\n\n    async function voteForProposal() {\n        const element = document.getElementById(\"vote-proposal-id\");\n        const id = element.value;\n        try {\n            const transaction = await contract.methods.setVote(id).send({ from: props.userAccount });\n            setVoterAddress(transaction.events.Voted.voter);\n            setProposalId(transaction.events.Voted.proposalId);\n        } catch (error) {\n            console.log(\"vote for proposal\", error);\n        }\n        element.value = \"\";\n    }\n\n    function Message() {\n        if (voterAddress && proposalId) {\n            return (\n                <p>{voterAddress} has vote for proposal {proposalId}</p>\n            )\n        }\n    }\n\n    return (\n        <div className=\"window\">\n            <h3>Voting - /!\\ Faire apparaitre dans la bonne session</h3>\n            <input id=\"vote-proposal-id\" type=\"text\" placeholder=\"Proposal id\" />\n            <button onClick={voteForProposal}>Validate</button>\n            <Message />\n        </div>\n    )\n}\n\nexport default Voting;","import React, { useEffect, useState } from \"react\";\n\nfunction Proposals(props) {\n    const [listId, setListId] = useState([]);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        async function updateProposalList() {\n            const options = {\n                fromBlock: 0,\n                toBlock: \"latest\"\n            }\n            const proposalsId = await contract.getPastEvents(\"ProposalRegistered\", options);\n            setListId(proposalsId);\n        }\n\n        updateProposalList();\n    },[]);\n\n    contract.events.ProposalRegistered({ fromBlock: \"latest\" })\n        .on('data', event => {\n                listId.push(event);\n                setListId(listId);\n        });\n\n    return (\n        <div className=\"window\">\n            <h3>Proposals list</h3>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Id</td>\n                        <td>Description</td>\n                    </tr>\n                    {listId.map(element => (\n                        <tr key={element.returnValues.proposalId}>\n                            <td>{element.returnValues.proposalId}</td>\n                            <td>description</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Proposals;","import React, { useEffect, useState } from \"react\";\n\nfunction Winning(props) {\n    const [workflowStatus, setworkflowStatus] = useState(props.workflowStatus);\n    const [idWinningProposal, setIdWinningProposal] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        console.log(props.workflowStatus)\n        if (props.workflowStatus == 5) {\n            console.log(\"Tallied vote\");\n            getWinningProposal();\n        }\n    },[]);\n\n    async function getWinningProposal() {\n        const id = await contract.methods.winningProposalID().call({ from: props.userAccount });\n        setIdWinningProposal(id);\n    }\n\n\n    return (\n        <div className=\"window\">\n            <h3>Winning proposal is {idWinningProposal}</h3>\n        </div>\n    )\n}\n\nexport default Winning;","import React, { useEffect, useState } from \"react\";\nimport Voting from \"./Voting\";\nimport Proposals from \"./Proposals\";\nimport Winning from \"./Winning\";\n\nfunction Voter(props) {\n    const [isRegistered, setIsRegistered] = useState(false);\n    const [workflowStatus, setworkflowStatus] = useState(0);\n    const [contract, setContract] = useState(props.contract);\n    const [event, setEvent] = useState(null);\n\n    useEffect(() => {\n        setContract(props.contract);\n        checkIfUserIsRegistered();\n        checkWorkflowStatus();\n    },[props.contract]);\n\n    // Je veux vérifier si user est registered\n    contract.events.VoterRegistered({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            if (event.returnValues.voterAddress === props.userAccount) {\n                setIsRegistered(true)\n            }\n        })\n    \n        // Je veux récupérer le workflowstatus actuel\n    contract.events.WorkflowStatusChange({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            let newStatus = event.returnValues.newStatus;\n            setworkflowStatus(newStatus);\n        })\n   \n    \n    async function checkIfUserIsRegistered() {\n        if (contract && props.userAccount) {\n            const user = await contract.methods.getVoter(props.userAccount).call({ from: props.userAccount });\n            setIsRegistered(user.isRegistered);\n        }\n    }\n\n    async function checkWorkflowStatus() {\n        if (contract && props.userAccount) {\n            const status = await contract.methods.workflowStatus().call({ from: props.userAccount });\n            setworkflowStatus(status);\n        }\n    }\n\n    async function addProposal() {\n        const element = document.getElementById(\"proposal-description\");\n        const description = element.value;\n        try {\n            const transaction = await contract.methods.addProposal(description).send({ from: props.userAccount });\n            const event = transaction.events.ProposalRegistered.returnValues.proposalId;\n            setEvent(event);\n        } catch (error) {\n            console.log(\"add proposal\", error)\n        }\n    }\n\n    function AddProposal() {\n        if (workflowStatus === \"1\") {\n            return (\n                <div className=\"window\">\n                    <h3>Add you're proposal</h3>\n                    <input className=\"appearance-none rounded relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm\" id=\"proposal-description\" type=\"text\" placeholder=\"Description...\" />\n                    <button onClick={addProposal}>Validate</button>\n                    {(event === null ? \"\" : <p>Proposal id {event} just recorded</p>)}\n                </div>\n            )\n        }\n        return <div className=\"window\"><h3>The proposal session is finished or not yet open</h3></div>\n    }\n\n    function inputAddProposal() {\n        if (isRegistered) {\n            return (\n                <div>\n                    <AddProposal />\n                </div>\n            )\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"window\">\n                <h2>Voter - {(isRegistered ? \"you are registered\" : \"you are not registered\")}</h2>\n            </div>\n            {inputAddProposal()}\n            <Winning userAccount={props.userAccount} workflowStatus={workflowStatus} contract={props.contract} />\n            <Voting userAccount={props.userAccount} contract={props.contract} />\n            <Proposals contract={props.contract} />\n        </div>\n        \n    )\n}\n\nexport default Voter;","import React, { useEffect, useState } from \"react\";\n\nfunction Voters(props) {\n    const [votersAddress, setVotersAddress] = useState([]);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        async function updateVotersList() {\n            const options = {\n                fromBlock: 0,\n                toBlock: \"latest\"\n            }\n            const addresses = await contract.getPastEvents(\"VoterRegistered\", options);\n            setVotersAddress(addresses);\n        }\n\n        updateVotersList();\n    },[]);\n\n    contract.events.VoterRegistered({ fromBlock: \"latest\" })\n        .on('data', event => {\n            votersAddress.push(event);\n            setVotersAddress(votersAddress);\n        });\n\n    return (\n        <div>\n            <h3>Voters list</h3>\n            <table>\n                <tbody>\n                    <tr>\n                        <td>Address</td>\n                    </tr>\n                    {votersAddress.map(element => (\n                        <tr key={element.returnValues.voterAddress}>\n                            <td>{element.returnValues.voterAddress}</td>\n                        </tr>\n                    ))}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nexport default Voters;","import React, { useEffect, useState } from \"react\";\nimport Voters from \"./Voters\";\n\nfunction AddVoter(props) {\n    const [event, setEvent] = useState(null);\n    const [contract, setContract] = useState(props.contract);\n\n    useEffect(() => {\n        setContract(props.contract);\n    },[props.contract]);\n\n    async function addNewVoter() {\n        const element = document.getElementById(\"new-voter-address\");\n        const voterToAdd = element.value;\n        let transaction;\n\n        try {\n            // Récupérer l'évenement dans la transaction\n            transaction = await contract.methods.addVoter(voterToAdd).send({ from: props.userAccount });\n            const event = transaction.events.VoterRegistered.returnValues.voterAddress;\n            setEvent(event);\n        } catch (error) {\n            console.log(error)\n        }\n\n        element.value = \"\";\n    }\n\n    return (\n        <div className=\"window\">\n            <h3>Add new voter</h3>\n            <input id=\"new-voter-address\" type=\"text\" placeholder=\"address 0x...\" />\n            <button onClick={addNewVoter}>Validate</button>\n            {(event === null ? \"\" : <p>{event} just recorded</p>)}\n            <Voters contract={props.contract} />\n        </div>\n    )\n}\n\nexport default AddVoter;","import React, { useEffect, useState } from \"react\";\n\nfunction WorkflowStatus(props) {\n    const [stringStatus, setStringStatus] = useState(\"Registering voters\");\n    const [contract, setContract] = useState(null);\n    const [status, setStatus] = useState(0);\n\n    useEffect(() => {\n        setContract(props.contract);\n        updateStatus();\n    },[props.contract]);\n\n    // Je veux récupérer le workflowstatus actuel\n    if (contract) {\n        contract.events.WorkflowStatusChange({ fromBlock: \"latest\" }) \n        .on('data', event => {\n            let newStatus = event.returnValues.newStatus;\n            setStatus(newStatus);\n            stringStatusFromId(newStatus)\n        })\n    }\n\n    async function updateStatus() {\n        if (contract) {\n            const statusId = await contract.methods.workflowStatus().call({ from: props.userAccount });\n            setStatus(statusId);\n            stringStatusFromId(statusId)\n        }\n    }\n\n    function stringStatusFromId(id) {\n        switch (id) {\n            case \"0\":\n                setStringStatus(\"Registering voters\");\n                break;\n            case \"1\":\n                setStringStatus(\"Proposals registration started\");\n                break;\n            case \"2\":\n                setStringStatus(\"Proposals registration ended\");\n                break;\n            case \"3\":\n                setStringStatus(\"Voting session started\");\n                break;\n            case \"4\":\n                setStringStatus(\"Voting session ended\");\n                break;\n            case \"5\":\n                setStringStatus(\"Votes tallied\");\n                break;\n            default:\n                setStringStatus(\"Status error\");\n        }\n    }\n\n    window.onload = updateStatus();\n    \n    return (\n        <div>\n            <hr/>\n            <h3>Workflowstatus {status} : {stringStatus}</h3>\n        </div>\n    )\n}\n\nexport default WorkflowStatus;","import WorkflowStatus from \"./WorkflowStatus\";\n\nfunction Header(props) {\n    return (\n        <div className=\"header\">\n            <h3 id=\"contract\">Contract: {props.contractAddress}</h3>\n            <h3 id=\"account\">Account: {props.userAccount}</h3>\n            <WorkflowStatus userAccount={props.userAccount} contract={props.contract} />\n        </div>\n    )\n}\n\nexport default Header;","import React, { useEffect, useState, useContext } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport getWeb3 from \"./scripts/getWeb3\";\nimport Voter from \"./components/Voter\";\nimport AddVoter from \"./components/AddVoter\";\nimport Header from \"./components/Header\";\nimport Proposals from \"./components/Proposals\";\n\n// import Owner from \"./components/Owner\";\n\n// Eléments de notation\n\n// Revoir le code sol pour enlever la faille de sécurité, ajouter les commentaires et les\n// éléments de bonnes pratiques\n// avoir une application décentralisée qui permet d'appeler toutes les fonctions\n// faire une vidéo du workflow\n\n// déployer l'application sur serveur public\n\nimport \"./App.css\";\n\n// ====================================\n// ---------- WORKFLOWSTATUS ----------\n// ====================================\n\nfunction ChangeWorkflowStatus(props) {\n    const contract = useContext(ContractContext);\n    const [workflowStatusEvent, setworkflowStatusEvent] = useState(null);\n    const [winningProposal, setWinningProposal] = useState(null);\n   \n    async function updateStatus() {\n        if (contract) {\n            const winningProposalID = await contract.methods.winningProposalID().call({ from: props.userAccount });\n            setWinningProposal(winningProposalID);\n        }\n    }\n\n    window.onload = updateStatus();\n    \n    function updatePreviousNextStatusInFront(transaction) {\n        const workflowStatus = [\n            transaction.events.WorkflowStatusChange.returnValues.previousStatus,\n            transaction.events.WorkflowStatusChange.returnValues.newStatus\n        ];\n        console.log(workflowStatus);\n        setworkflowStatusEvent(workflowStatus);\n    }\n\n    async function startProposalsRegistering() {\n        try {\n            const transaction = await contract.methods.startProposalsRegistering().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.error(\"start proposals registering\", error);\n        }\n    }\n\n    async function endProposalsRegistering() {\n        try {\n            const transaction = await contract.methods.endProposalsRegistering().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    async function startVotingSession() {\n        try {\n            const transaction = await contract.methods.startVotingSession().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    async function endVotingSession() {\n        try {\n            const transaction = await contract.methods.endVotingSession().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    async function tallyVotes() {\n        try {\n            const transaction = await contract.methods.tallyVotes().send({ from: props.userAccount });\n            updatePreviousNextStatusInFront(transaction);\n            const winningProposalID = await contract.methods.winningProposalID().call({ from: props.userAccount });\n            setWinningProposal(winningProposalID);\n        } catch (error) {\n            console.log(error);\n        } \n    }\n\n    return (\n        <div className=\"window\">\n            <div>Previous status : </div>\n            <div>New status : </div><br/>\n            <div>Winner is {winningProposal}</div>\n            \n            <div className=\"form\">\n                <button onClick={startProposalsRegistering}>1 - Start proposals registering</button>\n                <button onClick={endProposalsRegistering}>2 - End proposals registering</button>\n                <button onClick={startVotingSession}>3 - Start voting session</button>\n                <button onClick={endVotingSession}>4 - End voting session</button>\n                <button onClick={tallyVotes}>5 - Tally votes</button> \n            </div>\n        </div>\n    )\n}\n\n// ===========================\n// ---------- OWNER ----------\n// ===========================\n\nfunction Owner(props) {\n    return (\n        <div>\n            <div className=\"window\">\n                <h2>Owner</h2>\n            </div>\n            <ChangeWorkflowStatus userAccount={props.userAccount} />\n            <AddVoter userAccount={props.userAccount} contract={props.contract} />\n            <Proposals contract={props.contract} />\n        </div>\n    )\n}\n\n// =========================\n// ---------- APP ----------\n// =========================\n\nconst ContractContext = React.createContext();\n\nfunction App() {\n    const [web3, setWeb3] = useState(null);\n    const [accounts, setAccounts] = useState(null);\n    const [contract, setContract] = useState(null);\n    const [contractAddress, setContractAddress] = useState(null);\n    const [owner, setOwner] = useState(null);\n    const [isOwner, setIsOwner] = useState(false);\n    const [userAccount, setUserAccount] = useState(null);\n\n    useEffect(() => {\n        async function setUpWeb3() {\n            try {\n                const web3Provider = await getWeb3();\n                const accounts = await web3Provider.eth.getAccounts();\n                const networkId = await web3Provider.eth.net.getId();\n                const deployedNetwork = VotingContract.networks[networkId];\n                const instance = await new web3Provider.eth.Contract(\n                    VotingContract.abi,\n                    deployedNetwork && deployedNetwork.address\n                );\n                const contractOwner = await instance.methods.owner().call();\n                const contractAddress = await instance.options.address;\n                \n                if (accounts[0] === contractOwner) { setIsOwner(true) }\n                setWeb3(web3Provider);\n                setContract(instance);\n                setAccounts(accounts);\n                setOwner(contractOwner);\n                setContractAddress(contractAddress);\n                setUserAccount(accounts[0]);\n\n                \n            } catch (error) {\n                alert(\"Failed to load web3, accounts, or contract. Check console for details\");\n                console.error(error);\n            }\n        }\n        \n        setUpWeb3();\n    },[]);\n\n    function UserDashboard(props) {\n        if (props.userAccount) {\n            if (isOwner) {\n                return <Owner userAccount={props.userAccount} contract={props.contract} />;\n            }\n            return <Voter userAccount={props.userAccount} contract={props.contract} />;\n        }\n    }\n\n    if (!web3 && !contract) {\n        return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n    return (\n        <div className=\"wrapper\">\n            <ContractContext.Provider value={contract}>\n                <Header contractAddress={contractAddress} userAccount={userAccount} contract={contract} />\n                <UserDashboard isOwner={isOwner} userAccount={userAccount} contract={contract} />\n            </ContractContext.Provider>\n        </div>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}